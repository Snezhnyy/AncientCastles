/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projectone.Engine;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.Timer;
import projectone.Engine.fAction.GeneralAction;
import projectone.game.Room;
import projectone.game.Tile;
import projectone.game.Unit;
/**
 *
 * @author Snowdrop
 */
public class GameJFrame extends javax.swing.JFrame {
    protected Room room;
    protected Dimension screenPosition, mousePosition;
    protected Point cursorTile;
    protected Image cursor;
    public Image grave, iUnitEndTurn;
    public Tile[] tiles;
    public Unit[] units;
    protected javax.swing.Timer timer;
    protected boolean game;
    public GeneralAction action;
    /**
     * Creates new form NewJFrame
     */
    public GameJFrame() {
        initComponents();
        
        room = new Room();
        screenPosition = new Dimension(0,0);
        mousePosition = new Dimension(0,0);
        cursorTile = new Point();
        tiles = Load.tiles();
        units = Load.units();
        action = new GeneralAction();
        cursor = new ImageIcon("src" + File.separator + "projectone" + File.separator + "Image" + File.separator + "Cursor" + File.separator + "glassPanel_projection.png").getImage();
        grave = new ImageIcon("src" + File.separator + "projectone" + File.separator+ "Image" + File.separator + "Unit" + File.separator + "grave.png").getImage();
        iUnitEndTurn = new ImageIcon("src" + File.separator + "projectone" + File.separator+ "Image" + File.separator + "Cursor" + File.separator + "endMove.png").getImage();        
        ActionListener Tick = new ActionListener() {
            public void actionPerformed(ActionEvent e)
                {
                    repaint();
                }
        };
        timer = new Timer(40, Tick);
        timer.start();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(new java.awt.Color(233, 255, 255));
        setPreferredSize(new java.awt.Dimension(800, 600));
        setSize(new java.awt.Dimension(800, 600));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/*
    Взаимодействие с окном
    */
    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
            InteractMap.setMousePosition(mousePosition, evt);
            InteractMap.setCursorTilePosition(cursorTile, screenPosition, evt);
    }//GEN-LAST:event_formMouseMoved
    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if(game){ 
        InteractMap.setNewScreenPosition(screenPosition, mousePosition, evt);
         InteractMap.lagsScreenFix(screenPosition, room, this);
         InteractMap.setMousePosition(mousePosition, evt);
        }
    }//GEN-LAST:event_formMouseDragged
    /**
     * @param args the command line arguments
     */
    public Dimension getScreenPosition(){
        return screenPosition;
    }
    
    public Point getCursorTile(){
        return cursorTile;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
